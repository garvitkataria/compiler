
start functionDef# f integer i:void
start generateStatementBlockCode
end generateStatementBlockCode
end functionDef# f integer i

start functionDef# f integer i:void
start generateStatementBlockCode
end generateStatementBlockCode
end functionDef# f integer i

start functionDef# f integer j,integer i:integer
start generateStatementBlockCode
end generateStatementBlockCode
end functionDef# f integer j,integer i

start functionDef# f3 integer p1[2][3]:integer
start generateStatementBlockCode
end generateStatementBlockCode
end functionDef# f3 integer p1[2][3]

start functionDef# main :void
start generateStatementBlockCode
varDeclare# a a
varDeclare# C c
varDeclare# LINEAR f1
varDeclare# QUADRATIC f2
varDeclare# integer counter
varDeclare# float counter
varDeclare# integer i[2][3]
varDeclare# integer j[1][2][3]
assignStatement# f1 = build
assignStatement# f2 = build
assignStatement# b = 1
assignStatement# counter = f
funcCall# undefined 
assignStatement# counter = a
funcCall# f 1,1,1
funcCall# f 1
assignStatement# i[2] = 1
assignStatement# i[2] = 2
funcCall# f3 j
assignStatement# x = 1
start generateWhileStatementCode
start generateRelExprCode
condition# counter <= 10
end generateRelExprCode 
start generateStatementBlockCode
writeStatement# write counter
writeStatement# write evaluate
writeStatement# write evaluate
end generateStatementBlockCode
end generateWhileStatementCode
end generateStatementBlockCode
end functionDef# main 
